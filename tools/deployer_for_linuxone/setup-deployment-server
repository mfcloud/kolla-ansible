#!/bin/bash
#
# This script can be used to setup the deployment server before using kolla-ansible to deploy.
# Including setup docker image registry, local package repo, local pypi server, install
# kolla-ansible and its dependencies.


function usage {
    cat <<EOF
Usage: $0 [options]

Options:
    --online, -o                               Specify the package source is online, default is local
    --repo-port, -r <repository_port>          Specify the port to be used by the local package repository server, default is 8000
    --pypi-port, -p <pypi_port>                Specify the port to be used by the local pypi server, default is 8080
    --docker-registry-port, -d <registry_port> Specify the port to be used by the local docker registry server, default is 5001
    --base-dir, -b <CE_base_dir>               Specify the base directory, default is /data
    --bind-addr, -a <bind_ip_addr>             Specify the ip addr of the deployment server used to communicate with target nodes.
                                               If not specified, will try to automatically get the address using ifconfig and exclude
                                               the address 127.0.0.1 and 172.17.0.1(which is used by docker0).
                                               If two or more address are filtered, will abort.
    --install-, -b <CE_base_dir>               Specify the base directory, default is /data
    --install-docker, -k                       Install docker only and restart package repository server, pypi server and docker registry server
    --setup-repo, -s                           Setup local repository and install pip only
    --install-kolla-ansible, -t                Install kolla-ansible only
    --config-kolla-ansible, -c                 Configure kolla-ansible only
    --gen-script, -g                           Generate the openstack-ce-presetups.sh only
    --help, -h                                 Show this usage information
EOF
}

function section {
    echo ""
    echo "#####################################################################"
    echo "$1"
    echo "#####################################################################"
    echo ""
}


function check_status {
    rc=$1
    action=""
    if [[ $# -eq 2 ]]; then
        action=$2
    fi
    if [[ $rc -ne 0 ]]; then
        echo "$action: Failed."
        echo "Aborting."
        exit 1
    else
        echo "$action: Successfully."
    fi
}

function get_server_os {
    [[ ${SERVER_OS} == '' ]] && grep -i 'ubuntu' /proc/version && SERVER_OS='ubuntu'
    [[ ${SERVER_OS} == '' ]] && grep -i 'suse' /proc/version && SERVER_OS='suse'
    [[ ${SERVER_OS} == '' ]] && grep -i 'Red Hat' /proc/version && SERVER_OS='redhat'
    if [[ ${SERVER_OS} == '' ]]; then
        echo "Error: can't detect os type!"
        exit -1
    fi
    echo "Current OS is ${SERVER_OS}"
}

function find_containers_to_kill {
    existed_containers=$(docker ps --format "{{.Names}}" -a)
    if [ "${existed_containers}" == "" ]; then
        echo ""
        return
    fi
    target_containers=($REPO_SERVER $DOCKER_REGISTRY $PYPI_SERVER)
    containers_to_kill=""
    for c in ${target_containers[@]}; do
        if [ $(echo "${existed_containers[@]}" | grep -wq $c && echo $?) -eq 0 ]; then
            containers_to_kill=${containers_to_kill}" "$c
        fi
    done
    echo "$containers_to_kill"
}

function get_bind_addr {
    if [[ "$BIND_ADDR" != "" ]] ; then
        echo "$BIND_ADDR"
        return 0
    fi
    BIND_ADDR=$(/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|grep -v 172.17.0.1|awk '{print $2}'|tr -d "addr:")
    count=$(echo "${BIND_ADDR}" | wc -l)
    if [[ $count -ge 2 ]]; then
        echo "$count ip addresses are detected, please specify which to use explicitly by -a."
        echo "Aborting."
        return -1
    fi
    echo "Current OS IP is ${BIND_ADDR}"
    return 0
}

function install_docker_online {
    section "Install docker-ce on deployer server online"
    if [[ ${SERVER_OS} == 'redhat' ]];then
        yum install -y yum-utils device-mapper-persistent-data lvm2
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        cd ${CE_BASE}/OpenStackCE/rhel-repo/x86_64/docker-ce/repo/main/redhat/7/
        yum install -y container-selinux-2.74-1.el7.noarch.rpm
        yum install -y docker-ce
    fi
    systemctl start docker
    status=`systemctl status docker -q --no-pager | grep "Active: active (running)"`
    rc=$(if [[ -z "$status" ]]; then echo 1;else echo 0;fi)
    check_status $rc "Start docker service"
}

function install_docker_local {
    section "Install docker-ce from local repo"
    if [[ ${SERVER_OS} == 'ubuntu' ]];then
        dpkg -i ${CE_BASE}/OpenStackCE/docker-ce/*.deb 1>/dev/null
        check_status $? "Install docker-ce"
        status=`systemctl status docker -q --no-pager | grep "Active: active (running)"`
        rc=$(if [[ -z "$status" ]]; then echo 1;else echo 0;fi)
        check_status $rc "Start docker service"
    elif [[ ${SERVER_OS} == 'redhat' ]];then
        cd ${CE_BASE}/OpenStackCE/rhel-repo/x86_64/docker-ce/repo/main/redhat/7
        yum install -y container-selinux-2.74-1.el7.noarch.rpm
        yum install -y containerd.io-1.2.0-3.el7.x86_64.rpm  docker-ce-18.09.0-3.el7.x86_64.rpm  docker-ce-cli-18.09.0-3.el7.x86_64.rpm
        check_status $? "Install docker-ce"
    fi
}

function load_docker_images {
    section "Load docker images used to run local repo, pypiserver and docker registry"
    docker load -i "${CE_BASE}/OpenStackCE/deployment-docker-images.tar" 1>/dev/null
    check_status $? "Load docker image"

  # Check the list contains all the required docker images
    image_list=($REPO_SERVER_IMG $DOCKER_REGISTRY_IMG $PYPI_SERVER_IMG)
    missing_image=""
    for i in ${image_list[@]}; do
        output=$(docker images --format "{{.Repository}}:{{.Tag}}" $i)
        if [[ "$output" != "$i" ]]; then
            missing_image=${missing_image}" "$i
        fi
    done
    if [[ ${missing_image} != "" ]]; then
        echo "Docker image: ${missing_image} not found."
        echo "Aborting."
        exit 1
    fi
}

function kill_containers {
    section "Stop and Remove existed CE repo containers"
    echo "Finding containers to kill..."
    containers_to_kill=$(find_containers_to_kill)
    if [ "${containers_to_kill}" != "" ]; then
        echo "Containers to kill: ${containers_to_kill}"
        echo "Stopping containers..."
        (docker stop -t 5 ${containers_to_kill} 2>&1) > /dev/null
        echo "Removing containers..."
        (docker rm -f ${containers_to_kill} 2>&1) > /dev/null
    else
        echo "No existed CE related containers Found."
    fi
}

function start_package_server {
    section "Start local package repository server"
    if [[ ${SERVER_OS} == 'ubuntu' ]];then
        docker run -d --name $REPO_SERVER --restart=always -v ${CE_BASE}/OpenStackCE/ubuntu-mirror:/usr/share/nginx/html:ro -p ${REPOSITORY_PORT}:80 $REPO_SERVER_IMG 1>/dev/null
        check_status $?
    elif [[ ${SERVER_OS} == 'redhat' ]];then
        docker run -d --name $REPO_SERVER --restart=always -v ${CE_BASE}/OpenStackCE/rhel-repo:/usr/share/nginx/html:ro -p ${REPOSITORY_PORT}:80 $REPO_SERVER_IMG 1>/dev/null
        check_status $?
    fi
}

function start_docker_registry {
    section "Start local docker registry server"
    docker run -d --name $DOCKER_REGISTRY --restart=always -v ${CE_BASE}/OpenStackCE/docker-registry:/var/lib/registry -p ${DOCKER_REGISTRY_PORT}:5000 $DOCKER_REGISTRY_IMG 1>/dev/null
    check_status $?
}

function start_PYPI_server {
    section "Start local PYPI server"
    docker run -d --name $PYPI_SERVER --restart=always -v ${CE_BASE}/OpenStackCE/pypi:/data/packages -p ${PYPI_PORT}:8080 $PYPI_SERVER_IMG 1>/dev/null
    check_status $?
}

function generate_local_repo_file {
    if [[ ${SERVER_OS} == 'ubuntu' ]];then
        section "Generate sources.list template"
        mkdir -p ${CE_BASE}/OpenStackCE/bootstrap_files/ubuntu
        cp -f ${CE_BASE}/OpenStackCE/kolla-ansible/tools/deployer_for_linuxone/templates/ubuntu/* ${CE_BASE}/OpenStackCE/bootstrap_files/ubuntu
        check_status $? "Copy sources.list templates"
        if [[ $? -ne 0 ]]; then
            echo "Error: generate_local_repo_file failed!"
            exit -1
        fi
        sed -i "s/SERVER:REPO_PORT/${BIND_ADDR}:${REPOSITORY_PORT}/g" ${CE_BASE}/OpenStackCE/bootstrap_files/ubuntu/*list*
    elif [[ ${SERVER_OS} == 'redhat' ]];then
        section "Generate local-yum.repo template"
        mkdir -p ${CE_BASE}/OpenStackCE/bootstrap_files/rhel
        cp -f ${CE_BASE}/OpenStackCE/kolla-ansible/tools/deployer_for_linuxone/templates/rhel/* ${CE_BASE}/OpenStackCE/bootstrap_files/rhel
        check_status $? "Copy local-yum.repo templates"
        if [[ $? -ne 0 ]]; then
            echo "Error: generate_local_repo_file failed!"
            exit -1
        fi
        sed -i "s/SERVER:REPO_PORT/${BIND_ADDR}:${REPOSITORY_PORT}/g" ${CE_BASE}/OpenStackCE/bootstrap_files/rhel/*repo*
    fi
}

function setup_local_repo {
    section "Setup deployment server to use local package repository"
    suffix=`date +%Y%m%d`
    if [[ ${SERVER_OS} == 'ubuntu' ]];then
        cp -f /etc/apt/sources.list /etc/apt/sources.list.bk${suffix}
        check_status $? "Backup the old /etc/apt/sources.list"
        cp -f ${CE_BASE}/OpenStackCE/bootstrap_files/sources.list.x86 /etc/apt/sources.list
        check_status $? "Setup /etc/apt/sources.list"
        apt-get update 1>/dev/null
        check_status $? "Check repo with apt-get update command"
    elif [[ ${SERVER_OS} == 'redhat' ]];then
        cp -f ${CE_BASE}/OpenStackCE/bootstrap_files_rhel/local-yum.repo.x86 /etc/yum.repos.d/local-yum.repo
        check_status $? "Setup /etc/yum.repos.d/local-yum.repo"
    fi
}

function generate_pip_conf {
    section "Generate pip.conf template"
    cp -f ${CE_BASE}/OpenStackCE/kolla-ansible/tools/deployer_for_linuxone/templates/pip.conf ${CE_BASE}/OpenStackCE/bootstrap_files/
    check_status $? "Copy pip.conf templates"
    if [[ $? -ne 0 ]]; then
        echo "Error: generate_pip_conf failed!"
        exit -1
    fi
    sed -i "s/SERVER/${BIND_ADDR}/g" ${CE_BASE}/OpenStackCE/bootstrap_files/pip.conf
    sed -i "s/PORT/${PYPI_PORT}/g" ${CE_BASE}/OpenStackCE/bootstrap_files/pip.conf
}

function setup_local_PYPI_server {
    mkdir -p ${HOME}/.pip
    cp -f ${CE_BASE}/OpenStackCE/bootstrap_files/pip.conf ${HOME}/.pip/pip.conf
    check_status $? "Setup ${HOME}/.pip/pip.conf"
}

function install_git_pip {
    section "Install git and pip"
    if [[ ${SERVER_OS} == 'ubuntu' ]];then
        apt-get install -y git python-pip 1>/dev/null
        check_status $?
        section "Upgrade pip to latest"
        pip install pip==9.0.3 1>/dev/null
        check_status $? "Install pip of version 9.0.3 firstly"
        export PATH=$PATH && pip install --upgrade pip 1>/dev/null
        check_status $? "Upgrade pip to latest version"
        export PATH=$PATH && pip list 1>/dev/null
        check_status $? "Check pip list can work after upgrade"
    elif [[ ${SERVER_OS} == 'redhat' ]];then
        yum install -y git python2-pip 1>/dev/null
        pip install -U pip 1>/dev/null
        check_status $? "Install git and pip"
    fi
}

function install_kolla_ansible_requirements {
    section "Install kolla-ansible requirements"
    if [[ ${SERVER_OS} == 'ubuntu' ]];then
        apt-get install -y python-dev libffi-dev gcc libssl-dev python-selinux python-setuptools ansible 1>/dev/null
        check_status $? "Install depended packages and ansible"
        pip install -U ansible 1>/dev/null
        check_status $? "Upgrade ansible"
        apt-get remove -y python-yaml 1>/dev/null
        pip install PyYAML 1>/dev/null
        check_status $? "Remove python-yaml and reinstall with pip"
        pip install ansible 1>/dev/null
        check_status $? "Reinstall ansible with pip"
        echo "Install sshpass"
        apt-get install -y sshpass 1>/dev/null
        check_status $?
    elif [[ ${SERVER_OS} == 'redhat' ]];then
        yum install -y python-devel libffi-devel gcc openssl-devel libselinux-python python-libs ansible 1>/dev/null
        check_status $? "Install depended packages and ansible"
        pip install -U ansible 1>/dev/null
        check_status $? "Upgrade ansible"
        pip install --ignore-installed idna 1>/dev/null
        check_status $? "Install idna"
    fi
}

function install_kolla_ansible {
    section "Install kolla-ansible on deployment server"
    tee /etc/ansible/ansible.cfg 1>/dev/null << EOF
[defaults]
host_key_checking=False
pipelining=True
forks=100
EOF
    check_status $? "Update ansible configuration file"
    current_dir=$(pwd) && cd ${CE_BASE}/OpenStackCE/kolla-ansible/ && pip install . 1>/dev/null && rc=$? && cd ${current_dir}
    check_status $rc "Install kolla-ansible"
}

function copy_config_files {
    section "COPY configuration files to /etc/kolla"
    suffix=`date +%Y%m%d`
    cp -rf /etc/kolla /etc/kolla.bk${suffix} 2>/dev/null
    rm -rf /etc/kolla 2>/dev/null
    check_status $? "Backup old /etc/kolla if exists"
    cp -rf ${CE_BASE}/OpenStackCE/kolla-ansible/etc/kolla /etc/
    check_status $? "Copy /etc/kolla files"
    cp ${CE_BASE}/OpenStackCE/kolla-ansible/ansible/inventory/* /etc/kolla/
    check_status $? "Copy inventory files to /etc/kolla/"
    mkdir -p /etc/kolla/config/nova
    tee /etc/kolla/config/nova/nova-compute.conf 1>/dev/null << EOF
[DEFAULT]
enable_apis=osapi_compute,metadata
compute_driver=libvirt.LibvirtDriver
config_drive_format=iso9660
force_config_drive=True
firewall_driver=nova.virt.firewall.NoopFirewallDriver
pointer_model=ps2mouse
[vnc]
enabled=False
[libvirt]
virt_type=kvm
cpu_mode=none
inject_partition=-2
EOF
    check_status $? "Add nova-compute.conf into /etc/kolla/config/nova/"
}

function generate_scripts {
    section "Generat Script used to setup target nodes to use local repository"
    CUR_DIR=$(cd "$(dirname ${BASH_SOURCE[0]})" && pwd)
    python_dev_rpm=python-devel-2.7.13-27.1.s390x.rpm
    echo "Copying python devel rpm for suse s390x platform"
    cp -f $CUR_DIR/$python_dev_rpm /etc/kolla
    sources_x86=$(cat ${CE_BASE}/OpenStackCE/bootstrap_files/ubuntu/sources.list.x86)
    sources_s390x=$(cat ${CE_BASE}/OpenStackCE/bootstrap_files/ubuntu/sources.list.s390x)
    repo_x86=$(cat ${CE_BASE}/OpenStackCE/bootstrap_files/rhel/local-yum.repo.x86)
    repo_s390x=$(cat ${CE_BASE}/OpenStackCE/bootstrap_files/rhel/local-yum.repo.s390x)
    pip_conf=$(cat ${CE_BASE}/OpenStackCE/bootstrap_files/pip.conf)
    tee /etc/kolla/openstack-ce-presetups.sh 1>/dev/null << EOF
#!/bin/bash
node_arch=\$(arch)
os=''
grep -i 'ubuntu' /proc/version && os='ubuntu'
[[ \${os} == '' ]] && grep -i 'suse' /proc/version && os='suse'
[[ \${os} == '' ]] && grep -i 'Red Hat' /proc/version && os='redhat'
if [ \${os} == '' ]; then
    echo "Error: can't detect os type!"
    exit -1
fi
echo "target os is ${os}"
suffix=`date +%Y%m%d`
if [ \${node_arch} == 'x86_64' ]; then
    if [ \${os} == 'ubuntu' ]; then
        cp -f /etc/apt/sources.list /etc/apt/sources.list.bk${suffix}
        echo "${sources_x86}" > /etc/apt/sources.list
    elif [ \${os} == 'redhat' ]; then
        echo "${repo_x86}" > /etc/yum.repos.d/local-yum.repo
        echo "Install epel rpm on x86 rhel"
        yum install -y wget
        wget http://SERVER:REPO_PORT/epel-release-latest-7.noarch.rpm
        yum install -y epel-release-latest-7.noarch.rpm
    fi
elif [ \${os} == 'ubuntu' ]; then
    cp -f /etc/apt/sources.list /etc/apt/sources.list.bk
    echo "${sources_s390x}" > /etc/apt/sources.list
    echo "Installing python-dev on target nodes to be used by ansible..."
    apt-get update && apt-get install -y python-dev 1>/dev/null
elif [ \${os} == 'suse' ]; then
    echo "Installing python2-pip and python-setuptools on target nodes to be used by ansible..."
    zypper addrepo -G https://download.opensuse.org/repositories/devel:/languages:/python/openSUSE_Factory_zSystems/ python-dev
    zypper refresh
    #For easy_install
    zypper install -y --force-resolution python-setuptools
    zypper install -y --force-resolution python2-pip
    echo "Installing python-dev on target nodes to be used by ansible..."
    zypper install -y glibc-devel
    rpm -ivh ${python_dev_rpm}
elif [ \${os} == 'redhat' ]; then
    echo "${repo_s390x}" > /etc/yum.repos.d/local-yum.repo
    yum install -y wget
    wget http://SERVER:REPO_PORT/s390x/docker-18.06.1-ce.tgz
    tar xzvf docker-18.06.1-ce.tgz
    cp docker/* /usr/bin/
    echo "Install epel rpm on s390x rhel"
    wget http://SERVER:REPO_PORT/epel-release-latest-7.noarch.rpm
    yum install -y epel-release-latest-7.noarch.rpm
    mv /etc/yum.repos.d/epel*.repo /etc/yum.repos.d/epel*.repo.bak
fi

echo "Setup pip.conf"
mkdir -p \${HOME}/.pip/
echo "${pip_conf}" > \${HOME}/.pip/pip.conf
EOF
    sed -i "s/SERVER:REPO_PORT/${BIND_ADDR}:${REPOSITORY_PORT}/g" /etc/kolla/openstack-ce-presetups.sh
    chmod +x /etc/kolla/openstack-ce-presetups.sh
    check_status $?
}

function update_global {
    section "Update globals.yml with the local repo info"
    if [[ ${SERVER_OS} == 'ubuntu' ]]; then
        sed -i "s/LOCAL_DOCKER_REGISTRY/${BIND_ADDR}:${DOCKER_REGISTRY_PORT}/g" /etc/kolla/globals.yml
        check_status $? "Update docker registry info"
        sed -i "s/LOCAL_APT_REPO/${BIND_ADDR}:${REPOSITORY_PORT}/g" /etc/kolla/globals.yml
        check_status $? "Update apt package repo info"
    elif [[ ${SERVER_OS} == 'redhat' ]]; then
        sed -i "s/^#\(docker_yum_url\)/\1/g" /etc/kolla/globals.yml
        sed -i "s/DOCKER_YUM_REPO/${BIND_ADDR}:${REPOSITORY_PORT}\/x86_64\/docker-ce/g" /etc/kolla/globals.yml
        check_status $? "Update local yum docker repo"
    fi
}

SHORT_OPTS="hor:p:b:d:a:k:s,t,c,g"
LONG_OPTS="help,online,repo-port:,pypi-port:,docker-registry-port:,base-dir:,bind-addr:,install-docker,setup-repo,install-kolla-ansible,config-kolla-ansible,gen-script"
ARGS=$(getopt -o "${SHORT_OPTS}" -l "${LONG_OPTS}" --name "$0" -- "$@") || { usage >&2; exit 2; }

eval set -- "$ARGS"

SERVER_OS=''
PACKAGE_SOURCE="local"
REPOSITORY_PORT=8000
PYPI_PORT=8080
DOCKER_REGISTRY_PORT=5001
CE_BASE="/data"
BIND_ADDR=""
INSTALL_DOCKER=1
SETUP_REPO=1
INSTALL_KOLLA_ANSIBLE=1
CONFIG_KOLLA_ANSIBLE=1
GEN_SCRIPT=1

while [ "$#" -gt 1 ]; do
    case "$1" in

    (--online|-o)
            PACKAGE_SOURCE="online"
            shift 1
            ;;

    (--repo-port|-r)
            REPOSITORY_PORT="$2"
            shift 2
            ;;

    (--pypi-port|-p)
            PYPI_PORT="$2"
            shift 2
            ;;

    (--docker-registry-port|-d)
            DOCKER_REGISTRY_PORT="$2"
            shift 2
            ;;

    (--base-dir|-b)
            CE_BASE="$2"
            shift 2
            ;;

    (--bind-addr|-a)
            BIND_ADDR="$2"
            shift 2
            ;;

    (--install-docker|-k)
           SETUP_REPO=0
           INSTALL_KOLLA_ANSIBLE=0
           CONFIG_KOLLA_ANSIBLE=0
           GEN_SCRIPT=0
           shift 1
            ;;

    (--setup-repo|-s)
            INSTALL_DOCKER=0
            INSTALL_KOLLA_ANSIBLE=0
            CONFIG_KOLLA_ANSIBLE=0
            GEN_SCRIPT=0
            shift 1
            ;;

    (--install-kolla-ansible|-t)
            INSTALL_DOCKER=0
            SETUP_REPO=0
            CONFIG_KOLLA_ANSIBLE=0
            GEN_SCRIPT=0
            shift 1
            ;;

    (--config-kolla-ansible|-c)
            INSTALL_DOCKER=0
            SETUP_REPO=0
            INSTALL_KOLLA_ANSIBLE=0
            GEN_SCRIPT=0
            shift 1
            ;;

    (--gen-script|-g)
            INSTALL_DOCKER=0
            SETUP_REPO=0
            INSTALL_KOLLA_ANSIBLE=0
            CONFIG_KOLLA_ANSIBLE=0
            shift 1
            ;;

    (--help|-h)
            usage
            shift
            exit 0
            ;;

    (--)
            shift
            break
            ;;

    (*)
            echo "Unsupported option found: $1!"
            usage
            exit 3
            ;;
esac
done

# CE related docker images
REPO_SERVER_IMG="nginx:1.15.3"
DOCKER_REGISTRY_IMG="registry:2"
PYPI_SERVER_IMG="pypiserver:master"
# docker container names
REPO_SERVER="nginx"
DOCKER_REGISTRY="registry"
PYPI_SERVER="pypiserver"

# check the CE_base dir exists
if [[ ! -d "$CE_BASE" || ! -d "${CE_BASE}/OpenStackCE" ]]; then
    echo "The specified base directory $CE_BASE or ${CE_BASE}/OpenStackCE does not exists."
    exit 1
fi
#Get deployer OS
get_server_os

#Get deployer ip address
get_bind_addr

if [ ${INSTALL_DOCKER} -eq 1 ]; then
    if [[ "$PACKAGE_SOURCE" == "online" ]];then
        install_docker_online
    else
        install_docker_local
    fi

    load_docker_images

    kill_containers

    start_package_server

    start_docker_registry

    start_PYPI_server
fi

if [ $SETUP_REPO -eq 1 ]; then
    generate_local_repo_file

    generate_pip_conf

    setup_local_repo

    setup_local_PYPI_server
fi

if [ $INSTALL_KOLLA_ANSIBLE -eq 1 ]; then
    install_git_pip

    install_kolla_ansible_requirements

    install_kolla_ansible
fi

if [ $CONFIG_KOLLA_ANSIBLE -eq 1 ]; then
    copy_config_files
fi

if [ $GEN_SCRIPT -eq 1 ]; then
    generate_scripts
fi

update_global

echo ""
echo "*********************************"
echo "All setups finished Successfully!"
echo "*********************************"
exit 0
